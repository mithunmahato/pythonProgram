 list is a collection of elements, but each element is a scalar.
 The list is a type of data in Python used to store multiple objects. It is an ordered and mutable collection of comma-separated items between square brackets, e.g.
Syntax :: 
my_list = [1, None, True, "I am a string", 256, 0]
The value inside the brackets which selects one element of the list is called an index, while the operation of selecting an element from the list is known as indexing.
print(numbers[0]) # Accessing the list's first element.
nested list :: my_list = [1, 'a', ["list", 64, [0, 1], False]]
deletion of list ::
my_list = [1, 2, 3, 4]
del my_list[2]
print(my_list)  # outputs: [1, 2, 4]
del my_list  # deletes the whole list
===

list length - len(list)
removing element from list :: del a[0]
An element with an index equal to -1 is the last one in the list.
==
Adding elements to a list: append() and insert()
add value end of a list :: list.append(value)
The insert() method is a bit smarter ‒ it can add a new element at any place in the list ::: list.insert(location,value)
numbers=[2,1,5,4]
print("current list", numbers)
print("current length", len(numbers))
numbers.append(10)
print("New list with length ",numbers,len(numbers))
numbers.insert(2,13)
print("list after inserting",numbers)
==
numbers=[]
for i in range(5):
    numbers.append(i+1)
print(numbers)
==
my_list = []  # Creating an empty list.
 
for i in range(5):
    my_list.insert(0, i + 1)
 
print(my_list)
==
reverse of a list ::
my_list=[2,1,5,6,8]
length = len(my_list)
for i in range (length//2):
    my_list[i],my_list[length - i-1]=my_list[length-i-1],my_list[i]

print(my_list)
====
Bubble sort ::
increasing (or more precisely ‒ non-decreasing) ‒ if in every pair of adjacent elements, the former element is not greater than the latter;
decreasing (or more precisely ‒ non-increasing) ‒ if in every pair of adjacent elements, the former element is not less than the latter.
>> variable named swapped, and we assign a value of False to it, to indicate that there are no swaps. Otherwise, it will be assigned True.
my_list=[8,10,6,2,4]
swapped=True
while swapped:
    swapped=False
    for i in range(len(my_list)-1):
        if my_list[i]>my_list[i+1]:
            swapped = True
            my_list[i],my_list[i+1]=my_list[i+1],my_list[i]
print(my_list)
=====
user input bubble sort ::
my_list = []
swapped = True
num = int(input("How many elements do you want to sort: "))

for i in range(num):
    val = float(input("Enter a list element: "))
    my_list.append(val)

while swapped:
    swapped = False
    for i in range(len(my_list) - 1):
        if my_list[i] > my_list[i + 1]:
            swapped = True
            my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]

print("\nSorted:")
print(my_list)
===
python sorting mechanisms ::
my_list = [8, 10, 6, 2, 4]
my_list.sort()
print(my_list)
==
lst.reverse()
==
The inner life of lists ::
the name of an ordinary variable is the name of its content;
the name of a list is the name of a memory location where the list is stored.
==
Powerful slices // my_list[start:end]
list_1 = [1]
list_2 = list_1[:]
list_1[0] = 2
print(list_2)
==
negative indices ::
start is the index of the first element included in the slice;
end is the index of the first element not included in the slice.
my_list = [10, 8, 6, 4, 2]
new_list = my_list[1:-1]
print(new_list)
==
my_list[start:len(my_list)]
==
del instruction -
my_list = [10, 8, 6, 4, 2]
del my_list[1:3]
print(my_list)
==
del my_list[:] - will delete the content
del my_list - delete the list
===
The in and not in operators : 
my_list=[10,3,5,2,5,7]
print(111 in my_list)
print(10 in my_list)
print(3 not in my_list)
print(112 not in my_list)
==
sample program::
largest number ::
my_list=[10,3,5,2,5,7,25,17,18]
largest=my_list[0]

for i in range (1, len(my_list)):
    if my_list[i]>largest:
        largest=my_list[i]
print(largest)
==
or
my_list=[10,3,5,2,5,7,25,17,18]
largest=my_list[0]

for i in my_list:
    if i>largest:
        largest=i
print(largest)
==
using slice ::
my_list = [17, 3, 11, 5, 1, 9, 7, 15, 13]
largest = my_list[0]
 
for i in my_list[1:]:
    if i > largest:
        largest = i
 
print(largest)
==
find the location of a given element inside a list ::
my_list=[10,3,5,2,7,25,17,18]
to_find=5
found=False

for i in range(len(my_list)):
    found=my_list[i]==to_find
    if found:
        break
if found:
    print("Element found at index ",i)
else:
    print("Element not found")
==
remove duplicate ::
my_list = [1, 2, 4, 4, 1, 4, 2, 6, 2, 9]
new_list=[]
#
# Write your code here.
#
for number in my_list:
    if number not in new_list:
        new_list.append(number)
print("The list with unique elements only:")
print(new_list)
==
squares = [x ** 2 for x in range(10)]
print(squares)
twos = [2 ** i for i in range(8)]
print(twos)
odds = [x for x in squares if x % 2 != 0 ]
print(odds)
==
for element in list:
    if conditional:
        expression
==
board = []

board = [["EMPTY" for i in range(8)] for j in range(8)]
board[0][0] = "ROOK"
board[0][7] = "ROOK"
board[7][0] = "ROOK"
board[7][7] = "ROOK"
board[4][2] = "KNIGHT"
board[3][4] = "PAWN"
print(board)
==
higest temp :: multidimentional array - 
temps = [[0.0 for h in range(24)] for d in range(31)]
#
# The matrix is magically updated here.
#
 
highest = -100.0
 
for day in temps:
    for temp in day:
        if temp > highest:
            highest = temp
 
print("The highest temperature was:", highest)
==
three dimentional array ::
rooms = [[[False for r in range(20)] for f in range(15)] for t in range(3)]
==
vacancy at 15th floor 3rd building ::
vacancy = 0
 
for room_number in range(20):
    if not rooms[2][14][room_number]:
        vacancy += 1
===
# A four-column/four-row table ‒ a two dimensional array (4x4)

table = [[":(", ":)", ":(", ":)"],
         [":)", ":(", ":)", ":)"],
         [":(", ":)", ":)", ":("],
         [":)", ":)", ":)", ":("]]

print(table)
print(table[0][0])  # outputs: ':('
print(table[0][3])  # outputs: ':)'
===
cube ::
cube = [[[':(', 'x', 'x'],
         [':)', 'x', 'x'],
         [':(', 'x', 'x']],
 
        [[':)', 'x', 'x'],
         [':(', 'x', 'x'],
         [':)', 'x', 'x']],
 
        [[':(', 'x', 'x'],
         [':)', 'x', 'x'],
         [':)', 'x', 'x']]]
 
print(cube)
print(cube[0][0][0])  # outputs: ':('
print(cube[2][2][0])  # outputs: ':)'
==\
